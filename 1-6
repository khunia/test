class Numeric
      @@currencies = {'yen' => 0.013, 'euro' => 1.292, 'rupee' => 0.019, 'dollar' => 1}
      def method_missing(method, *arg)
        singular_currency = method.to_s.gsub(/s$/,'')
        if @@currencies.has_key?(singular_currency)
          self * @@currencies[singular_currency]
        else
          super	
        end
      end
      def in(arg)
        singular_currency = arg.to_s.gsub(/s$/,'')
        self / @@currencies[singular_currency]
      end
    end

 #   puts "5.dollars.in(:euros) = "+5.dollars.in(:euros).to_s
 #   puts "10.euros.in(:rupees) = "+10.euros.in(:rupees).to_s
 
 #   puts "10.rupees.in(:euro) = "+10.rupees.in(:euro).to_s
 #   puts "1.dollar.in(:rupees) = "+1.dollar.in(:rupees).to_s

module Enumerable
  def palindrome?
    self == self.reverse_each {|v| v}
  end
end

class String
 def method_missing(method_id, *args)
    if method_id.to_s == 'palindrome?'
      palindrome?(self)
    else
      super
    end
  end
end

  def palindrome?(string)
    test = self.downcase.gsub(/\W/,'')
     if 
      test == test.reverse
      puts "#{string}" " is Palindrome !"
    else 
      puts "#{string}" " is is not Palindrome !"
    end
  end

#"Never a foot too far, even.".palindrome? 
#"Abracadabra".palindrome? 
#"12321".palindrome?
#[1,2,3,2,1].palindrome?
 



